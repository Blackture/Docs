### YamlMime:ManagedReference
items:
- uid: ParrelSync.ClonesManager
  commentId: T:ParrelSync.ClonesManager
  id: ClonesManager
  parent: ParrelSync
  children:
  - ParrelSync.ClonesManager.ArgumentFileName
  - ParrelSync.ClonesManager.CloneFileName
  - ParrelSync.ClonesManager.CloneNameSuffix
  - ParrelSync.ClonesManager.CopyDirectoryWithProgressBar(System.String,System.String,System.String)
  - ParrelSync.ClonesManager.CopyLibraryFolder(ParrelSync.Project,ParrelSync.Project)
  - ParrelSync.ClonesManager.CreateCloneFromCurrent
  - ParrelSync.ClonesManager.CreateCloneFromPath(System.String)
  - ParrelSync.ClonesManager.CreateProjectFolder(ParrelSync.Project)
  - ParrelSync.ClonesManager.DefaultArgument
  - ParrelSync.ClonesManager.DeleteClone(System.String)
  - ParrelSync.ClonesManager.GetArgument
  - ParrelSync.ClonesManager.GetCloneProjectsPath
  - ParrelSync.ClonesManager.GetCurrentProject
  - ParrelSync.ClonesManager.GetCurrentProjectPath
  - ParrelSync.ClonesManager.GetOriginalProjectPath
  - ParrelSync.ClonesManager.IsClone
  - ParrelSync.ClonesManager.IsCloneProjectRunning(System.String)
  - ParrelSync.ClonesManager.LinkFolders(System.String,System.String)
  - ParrelSync.ClonesManager.MaxCloneProjectCount
  - ParrelSync.ClonesManager.OpenProject(System.String)
  - ParrelSync.ClonesManager.OpenProjectInFileExplorer(System.String)
  - ParrelSync.ClonesManager.ProjectName
  langs:
  - csharp
  - vb
  name: ClonesManager
  nameWithType: ClonesManager
  fullName: ParrelSync.ClonesManager
  type: Class
  source:
    id: ClonesManager
    path: ''
    startLine: 844
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nContains all required methods for creating a linked clone of the Unity project.\n"
  example: []
  syntax:
    content: public class ClonesManager
    content.vb: Public Class ClonesManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ParrelSync.ClonesManager.CloneFileName
  commentId: F:ParrelSync.ClonesManager.CloneFileName
  id: CloneFileName
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CloneFileName
  nameWithType: ClonesManager.CloneFileName
  fullName: ParrelSync.ClonesManager.CloneFileName
  type: Field
  source:
    id: CloneFileName
    path: ''
    startLine: 852
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nName used for an identifying file created in the clone project directory.\n"
  remarks: "\n(!) Do not change this after the clone was created, because then connection will be lost.\n"
  example: []
  syntax:
    content: public const string CloneFileName = ".clone"
    return:
      type: System.String
    content.vb: Public Const CloneFileName As String = ".clone"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ParrelSync.ClonesManager.CloneNameSuffix
  commentId: F:ParrelSync.ClonesManager.CloneNameSuffix
  id: CloneNameSuffix
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CloneNameSuffix
  nameWithType: ClonesManager.CloneNameSuffix
  fullName: ParrelSync.ClonesManager.CloneNameSuffix
  type: Field
  source:
    id: CloneNameSuffix
    path: ''
    startLine: 860
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nSuffix added to the end of the project clone name when it is created.\n"
  remarks: "\n(!) Do not change this after the clone was created, because then connection will be lost.\n"
  example: []
  syntax:
    content: public const string CloneNameSuffix = "_clone"
    return:
      type: System.String
    content.vb: Public Const CloneNameSuffix As String = "_clone"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ParrelSync.ClonesManager.ProjectName
  commentId: F:ParrelSync.ClonesManager.ProjectName
  id: ProjectName
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: ProjectName
  nameWithType: ClonesManager.ProjectName
  fullName: ParrelSync.ClonesManager.ProjectName
  type: Field
  source:
    id: ProjectName
    path: ''
    startLine: 862
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  syntax:
    content: public const string ProjectName = "ParrelSync"
    return:
      type: System.String
    content.vb: Public Const ProjectName As String = "ParrelSync"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ParrelSync.ClonesManager.MaxCloneProjectCount
  commentId: F:ParrelSync.ClonesManager.MaxCloneProjectCount
  id: MaxCloneProjectCount
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: MaxCloneProjectCount
  nameWithType: ClonesManager.MaxCloneProjectCount
  fullName: ParrelSync.ClonesManager.MaxCloneProjectCount
  type: Field
  source:
    id: MaxCloneProjectCount
    path: ''
    startLine: 867
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nThe maximum number of clones\n"
  example: []
  syntax:
    content: public const int MaxCloneProjectCount = 10
    return:
      type: System.Int32
    content.vb: Public Const MaxCloneProjectCount As Integer = 10
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ParrelSync.ClonesManager.ArgumentFileName
  commentId: F:ParrelSync.ClonesManager.ArgumentFileName
  id: ArgumentFileName
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: ArgumentFileName
  nameWithType: ClonesManager.ArgumentFileName
  fullName: ParrelSync.ClonesManager.ArgumentFileName
  type: Field
  source:
    id: ArgumentFileName
    path: ''
    startLine: 872
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nName of the file for storing clone&apos;s argument.\n"
  example: []
  syntax:
    content: public const string ArgumentFileName = ".parrelsyncarg"
    return:
      type: System.String
    content.vb: Public Const ArgumentFileName As String = ".parrelsyncarg"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ParrelSync.ClonesManager.DefaultArgument
  commentId: F:ParrelSync.ClonesManager.DefaultArgument
  id: DefaultArgument
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: DefaultArgument
  nameWithType: ClonesManager.DefaultArgument
  fullName: ParrelSync.ClonesManager.DefaultArgument
  type: Field
  source:
    id: DefaultArgument
    path: ''
    startLine: 877
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nDefault argument of the new clone\n"
  example: []
  syntax:
    content: public const string DefaultArgument = "client"
    return:
      type: System.String
    content.vb: Public Const DefaultArgument As String = "client"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ParrelSync.ClonesManager.CreateCloneFromCurrent
  commentId: M:ParrelSync.ClonesManager.CreateCloneFromCurrent
  id: CreateCloneFromCurrent
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CreateCloneFromCurrent()
  nameWithType: ClonesManager.CreateCloneFromCurrent()
  fullName: ParrelSync.ClonesManager.CreateCloneFromCurrent()
  type: Method
  source:
    id: CreateCloneFromCurrent
    path: ''
    startLine: 885
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nCreates clone from the project currently open in Unity Editor.\n"
  example: []
  syntax:
    content: public static Project CreateCloneFromCurrent()
    return:
      type: ParrelSync.Project
      description: ''
    content.vb: Public Shared Function CreateCloneFromCurrent As Project
  overload: ParrelSync.ClonesManager.CreateCloneFromCurrent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.CreateCloneFromPath(System.String)
  commentId: M:ParrelSync.ClonesManager.CreateCloneFromPath(System.String)
  id: CreateCloneFromPath(System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CreateCloneFromPath(String)
  nameWithType: ClonesManager.CreateCloneFromPath(String)
  fullName: ParrelSync.ClonesManager.CreateCloneFromPath(System.String)
  type: Method
  source:
    id: CreateCloneFromPath
    path: ''
    startLine: 902
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nCreates clone of the project located at the given path.\n"
  example: []
  syntax:
    content: public static Project CreateCloneFromPath(string sourceProjectPath)
    parameters:
    - id: sourceProjectPath
      type: System.String
      description: ''
    return:
      type: ParrelSync.Project
      description: ''
    content.vb: Public Shared Function CreateCloneFromPath(sourceProjectPath As String) As Project
  overload: ParrelSync.ClonesManager.CreateCloneFromPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.OpenProject(System.String)
  commentId: M:ParrelSync.ClonesManager.OpenProject(System.String)
  id: OpenProject(System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: OpenProject(String)
  nameWithType: ClonesManager.OpenProject(String)
  fullName: ParrelSync.ClonesManager.OpenProject(System.String)
  type: Method
  source:
    id: OpenProject
    path: ''
    startLine: 976
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nOpens a project located at the given path (if one exists).\n"
  example: []
  syntax:
    content: public static void OpenProject(string projectPath)
    parameters:
    - id: projectPath
      type: System.String
      description: ''
    content.vb: Public Shared Sub OpenProject(projectPath As String)
  overload: ParrelSync.ClonesManager.OpenProject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.IsCloneProjectRunning(System.String)
  commentId: M:ParrelSync.ClonesManager.IsCloneProjectRunning(System.String)
  id: IsCloneProjectRunning(System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: IsCloneProjectRunning(String)
  nameWithType: ClonesManager.IsCloneProjectRunning(String)
  fullName: ParrelSync.ClonesManager.IsCloneProjectRunning(System.String)
  type: Method
  source:
    id: IsCloneProjectRunning
    path: ''
    startLine: 1016
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nIs this project being opened by an Unity editor?\n"
  example: []
  syntax:
    content: public static bool IsCloneProjectRunning(string projectPath)
    parameters:
    - id: projectPath
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsCloneProjectRunning(projectPath As String) As Boolean
  overload: ParrelSync.ClonesManager.IsCloneProjectRunning*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.DeleteClone(System.String)
  commentId: M:ParrelSync.ClonesManager.DeleteClone(System.String)
  id: DeleteClone(System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: DeleteClone(String)
  nameWithType: ClonesManager.DeleteClone(String)
  fullName: ParrelSync.ClonesManager.DeleteClone(System.String)
  type: Method
  source:
    id: DeleteClone
    path: ''
    startLine: 1046
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nDeletes the clone of the currently open project, if such exists.\n"
  example: []
  syntax:
    content: public static void DeleteClone(string cloneProjectPath)
    parameters:
    - id: cloneProjectPath
      type: System.String
    content.vb: Public Shared Sub DeleteClone(cloneProjectPath As String)
  overload: ParrelSync.ClonesManager.DeleteClone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.CreateProjectFolder(ParrelSync.Project)
  commentId: M:ParrelSync.ClonesManager.CreateProjectFolder(ParrelSync.Project)
  id: CreateProjectFolder(ParrelSync.Project)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CreateProjectFolder(Project)
  nameWithType: ClonesManager.CreateProjectFolder(Project)
  fullName: ParrelSync.ClonesManager.CreateProjectFolder(ParrelSync.Project)
  type: Method
  source:
    id: CreateProjectFolder
    path: ''
    startLine: 1107
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nCreates an empty folder using data in the given Project object\n"
  example: []
  syntax:
    content: public static void CreateProjectFolder(Project project)
    parameters:
    - id: project
      type: ParrelSync.Project
      description: ''
    content.vb: Public Shared Sub CreateProjectFolder(project As Project)
  overload: ParrelSync.ClonesManager.CreateProjectFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.CopyLibraryFolder(ParrelSync.Project,ParrelSync.Project)
  commentId: M:ParrelSync.ClonesManager.CopyLibraryFolder(ParrelSync.Project,ParrelSync.Project)
  id: CopyLibraryFolder(ParrelSync.Project,ParrelSync.Project)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CopyLibraryFolder(Project, Project)
  nameWithType: ClonesManager.CopyLibraryFolder(Project, Project)
  fullName: ParrelSync.ClonesManager.CopyLibraryFolder(ParrelSync.Project, ParrelSync.Project)
  type: Method
  source:
    id: CopyLibraryFolder
    path: ''
    startLine: 1119
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nCopies the full contents of the unity library. We want to do this to avoid the lengthy re-serialization of the whole project when it opens up the clone.\n"
  example: []
  syntax:
    content: >-
      [Obsolete]

      public static void CopyLibraryFolder(Project sourceProject, Project destinationProject)
    parameters:
    - id: sourceProject
      type: ParrelSync.Project
      description: ''
    - id: destinationProject
      type: ParrelSync.Project
      description: ''
    content.vb: >-
      <Obsolete>

      Public Shared Sub CopyLibraryFolder(sourceProject As Project, destinationProject As Project)
  overload: ParrelSync.ClonesManager.CopyLibraryFolder*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.LinkFolders(System.String,System.String)
  commentId: M:ParrelSync.ClonesManager.LinkFolders(System.String,System.String)
  id: LinkFolders(System.String,System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: LinkFolders(String, String)
  nameWithType: ClonesManager.LinkFolders(String, String)
  fullName: ParrelSync.ClonesManager.LinkFolders(System.String, System.String)
  type: Method
  source:
    id: LinkFolders
    path: ''
    startLine: 1194
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nCreate a link / junction from the original project to it&apos;s clone.\n"
  example: []
  syntax:
    content: public static void LinkFolders(string sourcePath, string destinationPath)
    parameters:
    - id: sourcePath
      type: System.String
      description: ''
    - id: destinationPath
      type: System.String
      description: ''
    content.vb: Public Shared Sub LinkFolders(sourcePath As String, destinationPath As String)
  overload: ParrelSync.ClonesManager.LinkFolders*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.IsClone
  commentId: M:ParrelSync.ClonesManager.IsClone
  id: IsClone
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: IsClone()
  nameWithType: ClonesManager.IsClone()
  fullName: ParrelSync.ClonesManager.IsClone()
  type: Method
  source:
    id: IsClone
    path: ''
    startLine: 1230
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nReturns true if the project currently open in Unity Editor is a clone.\n"
  example: []
  syntax:
    content: public static bool IsClone()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsClone As Boolean
  overload: ParrelSync.ClonesManager.IsClone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.GetCurrentProjectPath
  commentId: M:ParrelSync.ClonesManager.GetCurrentProjectPath
  id: GetCurrentProjectPath
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: GetCurrentProjectPath()
  nameWithType: ClonesManager.GetCurrentProjectPath()
  fullName: ParrelSync.ClonesManager.GetCurrentProjectPath()
  type: Method
  source:
    id: GetCurrentProjectPath
    path: ''
    startLine: 1246
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nGet the path to the current unityEditor project folder&apos;s info\n"
  example: []
  syntax:
    content: public static string GetCurrentProjectPath()
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetCurrentProjectPath As String
  overload: ParrelSync.ClonesManager.GetCurrentProjectPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.GetCurrentProject
  commentId: M:ParrelSync.ClonesManager.GetCurrentProject
  id: GetCurrentProject
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: GetCurrentProject()
  nameWithType: ClonesManager.GetCurrentProject()
  fullName: ParrelSync.ClonesManager.GetCurrentProject()
  type: Method
  source:
    id: GetCurrentProject
    path: ''
    startLine: 1255
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nReturn a project object that describes all the paths we need to clone it.\n"
  example: []
  syntax:
    content: public static Project GetCurrentProject()
    return:
      type: ParrelSync.Project
      description: ''
    content.vb: Public Shared Function GetCurrentProject As Project
  overload: ParrelSync.ClonesManager.GetCurrentProject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.GetArgument
  commentId: M:ParrelSync.ClonesManager.GetArgument
  id: GetArgument
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: GetArgument()
  nameWithType: ClonesManager.GetArgument()
  fullName: ParrelSync.ClonesManager.GetArgument()
  type: Method
  source:
    id: GetArgument
    path: ''
    startLine: 1266
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nGet the argument of this clone project.\nIf this is the original project, will return an empty string.\n"
  example: []
  syntax:
    content: public static string GetArgument()
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetArgument As String
  overload: ParrelSync.ClonesManager.GetArgument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.GetOriginalProjectPath
  commentId: M:ParrelSync.ClonesManager.GetOriginalProjectPath
  id: GetOriginalProjectPath
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: GetOriginalProjectPath()
  nameWithType: ClonesManager.GetOriginalProjectPath()
  fullName: ParrelSync.ClonesManager.GetOriginalProjectPath()
  type: Method
  source:
    id: GetOriginalProjectPath
    path: ''
    startLine: 1287
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nReturns the path to the original project.\nIf currently open project is the original, returns its own path.\nIf the original project folder cannot be found, retuns an empty string.\n"
  example: []
  syntax:
    content: public static string GetOriginalProjectPath()
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetOriginalProjectPath As String
  overload: ParrelSync.ClonesManager.GetOriginalProjectPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.GetCloneProjectsPath
  commentId: M:ParrelSync.ClonesManager.GetCloneProjectsPath
  id: GetCloneProjectsPath
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: GetCloneProjectsPath()
  nameWithType: ClonesManager.GetCloneProjectsPath()
  fullName: ParrelSync.ClonesManager.GetCloneProjectsPath()
  type: Method
  source:
    id: GetCloneProjectsPath
    path: ''
    startLine: 1315
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nReturns all clone projects path.\n"
  example: []
  syntax:
    content: public static List<string> GetCloneProjectsPath()
    return:
      type: List{System.String}
      description: ''
    content.vb: Public Shared Function GetCloneProjectsPath As List(Of String)
  overload: ParrelSync.ClonesManager.GetCloneProjectsPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.CopyDirectoryWithProgressBar(System.String,System.String,System.String)
  commentId: M:ParrelSync.ClonesManager.CopyDirectoryWithProgressBar(System.String,System.String,System.String)
  id: CopyDirectoryWithProgressBar(System.String,System.String,System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: CopyDirectoryWithProgressBar(String, String, String)
  nameWithType: ClonesManager.CopyDirectoryWithProgressBar(String, String, String)
  fullName: ParrelSync.ClonesManager.CopyDirectoryWithProgressBar(System.String, System.String, System.String)
  type: Method
  source:
    id: CopyDirectoryWithProgressBar
    path: ''
    startLine: 1336
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  summary: "\nCopies directory located at sourcePath to destinationPath. Displays a progress bar.\n"
  example: []
  syntax:
    content: public static void CopyDirectoryWithProgressBar(string sourcePath, string destinationPath, string progressBarPrefix = "")
    parameters:
    - id: sourcePath
      type: System.String
    - id: destinationPath
      type: System.String
    - id: progressBarPrefix
      type: System.String
      description: Optional string added to the beginning of the progress bar window header.
    content.vb: Public Shared Sub CopyDirectoryWithProgressBar(sourcePath As String, destinationPath As String, progressBarPrefix As String = "")
  overload: ParrelSync.ClonesManager.CopyDirectoryWithProgressBar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ParrelSync.ClonesManager.OpenProjectInFileExplorer(System.String)
  commentId: M:ParrelSync.ClonesManager.OpenProjectInFileExplorer(System.String)
  id: OpenProjectInFileExplorer(System.String)
  parent: ParrelSync.ClonesManager
  langs:
  - csharp
  - vb
  name: OpenProjectInFileExplorer(String)
  nameWithType: ClonesManager.OpenProjectInFileExplorer(String)
  fullName: ParrelSync.ClonesManager.OpenProjectInFileExplorer(System.String)
  type: Method
  source:
    id: OpenProjectInFileExplorer
    path: ''
    startLine: 1488
  assemblies:
  - cs.temp.dll
  namespace: ParrelSync
  syntax:
    content: public static void OpenProjectInFileExplorer(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Public Shared Sub OpenProjectInFileExplorer(path As String)
  overload: ParrelSync.ClonesManager.OpenProjectInFileExplorer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: ParrelSync
  commentId: N:ParrelSync
  name: ParrelSync
  nameWithType: ParrelSync
  fullName: ParrelSync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ParrelSync.ClonesManager.CreateCloneFromCurrent*
  commentId: Overload:ParrelSync.ClonesManager.CreateCloneFromCurrent
  name: CreateCloneFromCurrent
  nameWithType: ClonesManager.CreateCloneFromCurrent
  fullName: ParrelSync.ClonesManager.CreateCloneFromCurrent
- uid: ParrelSync.Project
  commentId: T:ParrelSync.Project
  parent: ParrelSync
  name: Project
  nameWithType: Project
  fullName: ParrelSync.Project
- uid: ParrelSync.ClonesManager.CreateCloneFromPath*
  commentId: Overload:ParrelSync.ClonesManager.CreateCloneFromPath
  name: CreateCloneFromPath
  nameWithType: ClonesManager.CreateCloneFromPath
  fullName: ParrelSync.ClonesManager.CreateCloneFromPath
- uid: ParrelSync.ClonesManager.OpenProject*
  commentId: Overload:ParrelSync.ClonesManager.OpenProject
  name: OpenProject
  nameWithType: ClonesManager.OpenProject
  fullName: ParrelSync.ClonesManager.OpenProject
- uid: ParrelSync.ClonesManager.IsCloneProjectRunning*
  commentId: Overload:ParrelSync.ClonesManager.IsCloneProjectRunning
  name: IsCloneProjectRunning
  nameWithType: ClonesManager.IsCloneProjectRunning
  fullName: ParrelSync.ClonesManager.IsCloneProjectRunning
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ParrelSync.ClonesManager.DeleteClone*
  commentId: Overload:ParrelSync.ClonesManager.DeleteClone
  name: DeleteClone
  nameWithType: ClonesManager.DeleteClone
  fullName: ParrelSync.ClonesManager.DeleteClone
- uid: ParrelSync.ClonesManager.CreateProjectFolder*
  commentId: Overload:ParrelSync.ClonesManager.CreateProjectFolder
  name: CreateProjectFolder
  nameWithType: ClonesManager.CreateProjectFolder
  fullName: ParrelSync.ClonesManager.CreateProjectFolder
- uid: ParrelSync.ClonesManager.CopyLibraryFolder*
  commentId: Overload:ParrelSync.ClonesManager.CopyLibraryFolder
  name: CopyLibraryFolder
  nameWithType: ClonesManager.CopyLibraryFolder
  fullName: ParrelSync.ClonesManager.CopyLibraryFolder
- uid: ParrelSync.ClonesManager.LinkFolders*
  commentId: Overload:ParrelSync.ClonesManager.LinkFolders
  name: LinkFolders
  nameWithType: ClonesManager.LinkFolders
  fullName: ParrelSync.ClonesManager.LinkFolders
- uid: ParrelSync.ClonesManager.IsClone*
  commentId: Overload:ParrelSync.ClonesManager.IsClone
  name: IsClone
  nameWithType: ClonesManager.IsClone
  fullName: ParrelSync.ClonesManager.IsClone
- uid: ParrelSync.ClonesManager.GetCurrentProjectPath*
  commentId: Overload:ParrelSync.ClonesManager.GetCurrentProjectPath
  name: GetCurrentProjectPath
  nameWithType: ClonesManager.GetCurrentProjectPath
  fullName: ParrelSync.ClonesManager.GetCurrentProjectPath
- uid: ParrelSync.ClonesManager.GetCurrentProject*
  commentId: Overload:ParrelSync.ClonesManager.GetCurrentProject
  name: GetCurrentProject
  nameWithType: ClonesManager.GetCurrentProject
  fullName: ParrelSync.ClonesManager.GetCurrentProject
- uid: ParrelSync.ClonesManager.GetArgument*
  commentId: Overload:ParrelSync.ClonesManager.GetArgument
  name: GetArgument
  nameWithType: ClonesManager.GetArgument
  fullName: ParrelSync.ClonesManager.GetArgument
- uid: ParrelSync.ClonesManager.GetOriginalProjectPath*
  commentId: Overload:ParrelSync.ClonesManager.GetOriginalProjectPath
  name: GetOriginalProjectPath
  nameWithType: ClonesManager.GetOriginalProjectPath
  fullName: ParrelSync.ClonesManager.GetOriginalProjectPath
- uid: ParrelSync.ClonesManager.GetCloneProjectsPath*
  commentId: Overload:ParrelSync.ClonesManager.GetCloneProjectsPath
  name: GetCloneProjectsPath
  nameWithType: ClonesManager.GetCloneProjectsPath
  fullName: ParrelSync.ClonesManager.GetCloneProjectsPath
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ParrelSync.ClonesManager.CopyDirectoryWithProgressBar*
  commentId: Overload:ParrelSync.ClonesManager.CopyDirectoryWithProgressBar
  name: CopyDirectoryWithProgressBar
  nameWithType: ClonesManager.CopyDirectoryWithProgressBar
  fullName: ParrelSync.ClonesManager.CopyDirectoryWithProgressBar
- uid: ParrelSync.ClonesManager.OpenProjectInFileExplorer*
  commentId: Overload:ParrelSync.ClonesManager.OpenProjectInFileExplorer
  name: OpenProjectInFileExplorer
  nameWithType: ClonesManager.OpenProjectInFileExplorer
  fullName: ParrelSync.ClonesManager.OpenProjectInFileExplorer
