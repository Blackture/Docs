### YamlMime:ManagedReference
items:
- uid: CardBattle.Core.Generation.Biome
  commentId: T:CardBattle.Core.Generation.Biome
  id: Biome
  parent: CardBattle.Core.Generation
  children:
  - CardBattle.Core.Generation.Biome.#ctor(System.String,Material)
  - CardBattle.Core.Generation.Biome.biomes
  - CardBattle.Core.Generation.Biome.HeightMultiplier
  - CardBattle.Core.Generation.Biome.Material
  - CardBattle.Core.Generation.Biome.Name
  langs:
  - csharp
  - vb
  name: Biome
  nameWithType: Biome
  fullName: CardBattle.Core.Generation.Biome
  type: Class
  source:
    id: Biome
    path: ''
    startLine: 952
  assemblies:
  - cs.temp.dll
  namespace: CardBattle.Core.Generation
  syntax:
    content: >-
      [Serializable]

      public class Biome
    content.vb: >-
      <Serializable>

      Public Class Biome
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CardBattle.Core.Generation.Biome.biomes
  commentId: F:CardBattle.Core.Generation.Biome.biomes
  id: biomes
  parent: CardBattle.Core.Generation.Biome
  langs:
  - csharp
  - vb
  name: biomes
  nameWithType: Biome.biomes
  fullName: CardBattle.Core.Generation.Biome.biomes
  type: Field
  source:
    id: biomes
    path: ''
    startLine: 955
  assemblies:
  - cs.temp.dll
  namespace: CardBattle.Core.Generation
  syntax:
    content: public static List<Biome> biomes
    return:
      type: System.Collections.Generic.List{CardBattle.Core.Generation.Biome}
    content.vb: Public Shared biomes As List(Of Biome)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CardBattle.Core.Generation.Biome.Material
  commentId: P:CardBattle.Core.Generation.Biome.Material
  id: Material
  parent: CardBattle.Core.Generation.Biome
  langs:
  - csharp
  - vb
  name: Material
  nameWithType: Biome.Material
  fullName: CardBattle.Core.Generation.Biome.Material
  type: Property
  source:
    id: Material
    path: ''
    startLine: 961
  assemblies:
  - cs.temp.dll
  namespace: CardBattle.Core.Generation
  syntax:
    content: public Material Material { get; }
    parameters: []
    return:
      type: Material
    content.vb: Public ReadOnly Property Material As Material
  overload: CardBattle.Core.Generation.Biome.Material*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CardBattle.Core.Generation.Biome.Name
  commentId: P:CardBattle.Core.Generation.Biome.Name
  id: Name
  parent: CardBattle.Core.Generation.Biome
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Biome.Name
  fullName: CardBattle.Core.Generation.Biome.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 962
  assemblies:
  - cs.temp.dll
  namespace: CardBattle.Core.Generation
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: CardBattle.Core.Generation.Biome.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CardBattle.Core.Generation.Biome.HeightMultiplier
  commentId: P:CardBattle.Core.Generation.Biome.HeightMultiplier
  id: HeightMultiplier
  parent: CardBattle.Core.Generation.Biome
  langs:
  - csharp
  - vb
  name: HeightMultiplier
  nameWithType: Biome.HeightMultiplier
  fullName: CardBattle.Core.Generation.Biome.HeightMultiplier
  type: Property
  source:
    id: HeightMultiplier
    path: ''
    startLine: 963
  assemblies:
  - cs.temp.dll
  namespace: CardBattle.Core.Generation
  syntax:
    content: public float HeightMultiplier { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property HeightMultiplier As Single
  overload: CardBattle.Core.Generation.Biome.HeightMultiplier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CardBattle.Core.Generation.Biome.#ctor(System.String,Material)
  commentId: M:CardBattle.Core.Generation.Biome.#ctor(System.String,Material)
  id: '#ctor(System.String,Material)'
  parent: CardBattle.Core.Generation.Biome
  langs:
  - csharp
  - vb
  name: Biome(String, Material)
  nameWithType: Biome.Biome(String, Material)
  fullName: CardBattle.Core.Generation.Biome.Biome(System.String, Material)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 965
  assemblies:
  - cs.temp.dll
  namespace: CardBattle.Core.Generation
  syntax:
    content: public Biome(string name, Material material)
    parameters:
    - id: name
      type: System.String
    - id: material
      type: Material
    content.vb: Public Sub New(name As String, material As Material)
  overload: CardBattle.Core.Generation.Biome.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CardBattle.Core.Generation
  commentId: N:CardBattle.Core.Generation
  name: CardBattle.Core.Generation
  nameWithType: CardBattle.Core.Generation
  fullName: CardBattle.Core.Generation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{CardBattle.Core.Generation.Biome}
  commentId: T:System.Collections.Generic.List{CardBattle.Core.Generation.Biome}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Biome>
  nameWithType: List<Biome>
  fullName: System.Collections.Generic.List<CardBattle.Core.Generation.Biome>
  nameWithType.vb: List(Of Biome)
  fullName.vb: System.Collections.Generic.List(Of CardBattle.Core.Generation.Biome)
  name.vb: List(Of Biome)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CardBattle.Core.Generation.Biome
    name: Biome
    nameWithType: Biome
    fullName: CardBattle.Core.Generation.Biome
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CardBattle.Core.Generation.Biome
    name: Biome
    nameWithType: Biome
    fullName: CardBattle.Core.Generation.Biome
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CardBattle.Core.Generation.Biome.Material*
  commentId: Overload:CardBattle.Core.Generation.Biome.Material
  name: Material
  nameWithType: Biome.Material
  fullName: CardBattle.Core.Generation.Biome.Material
- uid: Material
  isExternal: true
  name: Material
  nameWithType: Material
  fullName: Material
- uid: CardBattle.Core.Generation.Biome.Name*
  commentId: Overload:CardBattle.Core.Generation.Biome.Name
  name: Name
  nameWithType: Biome.Name
  fullName: CardBattle.Core.Generation.Biome.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CardBattle.Core.Generation.Biome.HeightMultiplier*
  commentId: Overload:CardBattle.Core.Generation.Biome.HeightMultiplier
  name: HeightMultiplier
  nameWithType: Biome.HeightMultiplier
  fullName: CardBattle.Core.Generation.Biome.HeightMultiplier
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: CardBattle.Core.Generation.Biome.#ctor*
  commentId: Overload:CardBattle.Core.Generation.Biome.#ctor
  name: Biome
  nameWithType: Biome.Biome
  fullName: CardBattle.Core.Generation.Biome.Biome
